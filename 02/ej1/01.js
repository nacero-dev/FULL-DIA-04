
/* EJ 1 */

function mostrarPares() {
  for (let i = 1; i <= 100; i++) {
    if (i % 2 === 0) {
      console.log(i);
    }
  }
}

mostrarPares();


/*
// DeclaraciÃ³n de la funciÃ³n llamada 'mostrarPares'
function mostrarPares() {
  
  // Bucle for que inicializa la variable 'i' en 1,
  // se ejecuta mientras 'i' sea menor o igual a 100,
  // e incrementa 'i' en 1 en cada iteraciÃ³n
  for (let i = 1; i <= 100; i++) {
    
    // Condicional que verifica si el nÃºmero es par
    // (i % 2 === 0 significa que el residuo de dividir 'i' entre 2 es 0)
    if (i % 2 === 0) {
      
      // Si la condiciÃ³n se cumple, muestra el nÃºmero en la consola
      console.log(i);
    }
  }
}

// Llamada a la funciÃ³n para que se ejecute
mostrarPares();


Comentario general sobre la sintaxis:

function mostrarPares() { ... } â†’ DeclaraciÃ³n de una funciÃ³n tradicional en JavaScript. No recibe parÃ¡metros.

for (let i = 1; i <= 100; i++) â†’ Estructura de control iterativa. Usa let para declarar i con alcance de bloque (buena prÃ¡ctica).

if (i % 2 === 0) â†’ CondiciÃ³n que evalÃºa si un nÃºmero es par utilizando el operador mÃ³dulo (%). === se usa para comparar con tipo estricto.

console.log(i); â†’ Muestra los nÃºmeros pares en la consola.

mostrarPares(); â†’ Ejecuta la funciÃ³n.


InicializaciÃ³n: let i = 1 â€“ Se declara una variable i que comienza en 1.
CondiciÃ³n: i <= 100 â€“ Mientras esta condiciÃ³n sea verdadera, el ciclo continuarÃ¡.
Incremento: i++ â€“ DespuÃ©s de cada iteraciÃ³n, se suma 1 a i


ðŸ“¦ Alcance de bloque (block scope)

Esto tiene que ver con dÃ³nde existe una variable (es decir, desde dÃ³nde se puede acceder a ella).
Cuando decimos que una variable tiene alcance de bloque, significa que solo existe dentro del bloque en el que fue declarada. En JavaScript, los bloques estÃ¡n definidos por llaves { }.
Esto pasa porque se usÃ³ let. Si hubiÃ©ramos usado var, i sÃ­ estarÃ­a disponible fuera del for, porque var tiene alcance de funciÃ³n, no de bloque. Pero eso puede causar errores, por eso let (y const) se recomienda hoy en dÃ­a.

*/